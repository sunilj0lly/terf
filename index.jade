doctype 5
html
  head
    script(src='http://code.jquery.com/jquery-1.6.1.min.js')
    script(src='/socket.io/socket.io.js')

    <meta name="viewport" content="user-scalable= no, initial-scale=1.0">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <link rel="apple-touch-icon-precomposed" href="apple-touch-icon-57x57.png" />
    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="apple-touch-icon-72x72.png" />
    <link rel="apple-touch-icon" sizes="114x114" href="apple-touch-icon-114x114.png" />
    <link rel="apple-touch-startup-image" href="apple-touch-startup-image-320x460.png" />
    <link rel="apple-touch-startup-image" sizes="768x1004" href="apple-touch-startup-image-768x1004.png" />
    <link href='http://fonts.googleapis.com/css?family=Lato:100,300,400,700' rel='stylesheet' type='text/css'>

    <link rel="stylesheet" href="/stylesheets/normalize.css"/>
    style
      #nickname,
      #connecting {
        position: absolute;
        height: 600px;
        z-index: 100;
        left: 0;
        top: 0;
        background: #fff;
        text-align: center;
        width: 100%;
        font: 15px Georgia;
        color: #666;
        display: block;
      }
      #nickname .wrap,
      #connecting .wrap {
        padding-top: 150px;
      }
      #nickname input {
        border: 1px solid #ccc;
        padding: 10px;
      }
      #nickname input:focus {
        border-color: #999;
        outline: 0;
      }
      #nickname #nickname-err {
        color: #8b0000;
        font-size: 12px;
        visibility: hidden;
      }
      .connected #connecting {
        display: none;
      }
      .nickname-set #nickname {
        display: none;
      }


      *{
        box-sizing: border-box;
      }
      h1,p{
        font-family: 'Lato', sans-serif;
      }
      .header{
        background: #10e242;
        height:3.5em;
        border-bottom: #0ace26 3px solid;
      }
      
      .header h1{
        color: white;
        text-align: center;
        font-size: 23px;
        margin: 0;
        padding-top:13px;
      }
      .article{
        height: 27.3em;
        overflow: scroll;
        -webkit-overflow-scrolling: touch;
      }
      .chat-bar{}
      .inputFlex{
        display: flex;
        background: #ecf0f1;
        border: 0;
        border-top: #ddd 3px solid;
      }
      input[type=text]{
        border: 0;
        height: 40px;
        width:13em;
        font-family: 'Lato', sans-serif;

      }
      input[type=submit]{
        border: 0;
        background: #3498db;
        color: white;
        font-family: 'Lato', sans-serif;
        height:40px;
        width:4.5em;
        font-size: 18px;
        text-align: center;
        border-radius:2px;
      }
      .input-text{
            
      }
      .input-submit{}
      .chat-list{
        list-style: none;
        margin: 0;
        padding: 0;
      }
      .chat-item{
        border-bottom: 1px rgb(221, 221, 221) solid;
        display: flex;
        display: -webkit-flex;
        -webkit-box-align: flex-start;
        align-items: flex-start;
        height: 90px;
      
      }
      .item-left{
      }
      .profile-pic{
        width: 60px;
        height: 60px;
        overflow: hidden;
        border-radius: 40px;
        margin: 10px;
        display: block;
      }
      .item-right{
        flex:1;
        -webkit-box-flex:1;
        border-left: 3px rgb(221, 221, 221) solid;
        height: 100%;
        width:250px;
        padding-left: 15px; 
      }
      .speech:before{
        content: "";
        position: absolute;
        width: 10px;
        height: 10px;
        background: rgb(44, 62, 80);
        border-radius: 10px;
        left: -29px;
        top: 32px;
        border: 3px solid rgb(255, 255, 255);
          }
      .speech{
        position: relative;
        padding: 5px;
        margin:5px;
        min-height: 49px;
        background: #bdc3c7;
        -webkit-border-radius: 4px;
        -moz-border-radius: 4px;
        border-radius: 10px;
      }
      .speech:after{
        content: '';
        position: absolute;
        border-style: solid;
        border-width: 11px 13px 11px 0;
        border-color: transparent #bdc3c7;
        display: block;
        width: 0;
        z-index: 1;
        left: -13px;
        top: 29px;
      }
      .speech p{
        font-size: 12px;
        padding: 0 3px 0 3px;
      }

    script
      // socket.io specific code
      var socket = io.connect();

      socket.on('connect', function () {
        $('#connecting').addClass('connected').hide();
      });

      socket.on('announcement', function (msg) {
       // $('#lines').append($('<p>').append($('<em>').text(msg)));
      });

      socket.on('nicknames', function (nicknames) {
       /* $('#nicknames').empty().append($('<span>Online: </span>'));
        for (var i in nicknames) {
          $('#nicknames').append($('<b>').text(nicknames[i]));
        }*/
      });

      socket.on('user message', message);
      socket.on('reconnect', function () {
        $('#lines').remove();
        message('System', 'Reconnected to the server');
      });

      socket.on('reconnecting', function () {
        message('System', 'Attempting to re-connect to the server');
      });

      socket.on('error', function (e) {
        message('System', e ? e : 'A unknown error occurred');
      });

      function message (from, msg) {
        if (msg.room == "") {
          return;
        }
        var $chatItem = $('.chat-item:last').clone();
        $chatItem.find('.speech p').text(msg.message);
        $('#lines').prepend($chatItem);
        $chatItem.hide().fadeIn('slow');
        //$('#lines').append($('<p>').append($('<b>').text(from), msg.message));
      }

      // dom manipulation
      $(function () {

        //hack!
        $('.chat-item').hide();//hide chat template item

        $('#set-nickname').submit(function (ev) {
          socket.emit('nickname', $('#nick').val(), function (set) {
            if (!set) {
              clear();
              $('#nickname').hide();
              return;// $('#chat').addClass('nickname-set');
            }
            $('#nickname-err').css('visibility', 'visible');
          });
          ev.preventDefault();
          return false;
        });

        $('#send-message').submit(function (ev) {
          console.log('send');
          message('me', { message: $('#message').val(), room: room });
          socket.emit('user message', { message: $('#message').val(), room: room });
          clear();
          $('#lines').get(0).scrollTop = 10000000;
          ev.preventDefault();
          return false;
        });

        function clear () {
          $('#message').val('').focus();
        };
      });

      var geoOpts = {
        enableHighAccuracy: true,
        timeout: 10 * 1000
      };

      var rooms = [];

      var tentTop = {
        name: "Tent",
        latitude: 51.996022872675205,
        longitude: -0.742152649909949
      };

      var tentBottom = {
        name: "Tent Bottom",
        latitude: 51.99612177913263,
        longitude: -0.7421955652541874
      }

      rooms.push(tentTop);
      rooms.push(tentBottom);

      navigator.geolocation.watchPosition(getLocation, onGeoError, geoOpts);

      var room = "";

      function getLocation(location) {

          var coords = location.coords;

          var MIN_ACCURACY = 15;
          if (coords.accuracy < MIN_ACCURACY) {
            
            //debug info
           // $('.js-info').show();
            //$('.js-error').hide();
            //$('.js-position').val('lat: ' + coords.latitude + ', long: ' + coords.longitude + ', accuracy: ' + coords.accuracy);
            
            //calculate distances
            var distanceToTentTop = getDistance(coords, tentTop);
            var distanceToTentBottom = getDistance(coords, tentBottom);

            //debug
           // $('.js-tent-top').text('distance from tent top: ' + distanceToTentTop + 'm.');
            //$('.js-tent-bottom').text('distance from tent bottom: ' + distanceToTentBottom + 'm.');    

            //select room
            var roomDistance = 0;
            var MAX_DISTANCE_ROOM_CENTER = 15;
            if (distanceToTentTop < distanceToTentBottom) {
              room = "Tent (Stage)";
              roomDistance = distanceToTentTop;
            } else {
              room = "Tent (Entrance)";
              roomDistance = distanceToTentBottom;
            }

            if (roomDistance > MAX_DISTANCE_ROOM_CENTER) {
              room = "";
            }

          } else {

            //debug
            //$('.js-info').hide();
            //$('.js-error').show();
            alert("Your location accuracy is too low. (Yours: " + coords.accuracy + ", required: " + MIN_ACCURACY);
            //$('.js-accuracy').text('Accuracy must be ' + MIN_ACCURACY + 'm, your accuracy is ' + coords.accuracy + 'm.');
            
            room = "";
          }

          if (room == "") {
            $('.js-room').text("No room");  
            $('.js-chat').fadeOut();
          } else {
            $('.js-room').text(room);
            $('.js-chat').fadeIn();
          }
      }

      function onGeoError(error) {
        console.log(error);
      }

      function getDistance(coords, target) {
        var distance = getDistanceFromLatLonInM(coords.latitude, coords.longitude, target.latitude, target.longitude);
        return Math.round(distance * 10)/10;
      }

      function getDistanceFromLatLonInM(lat1,lon1,lat2,lon2) {
        var R = 6371; // Radius of the earth in km
        var dLat = deg2rad(lat2-lat1);  // deg2rad below
        var dLon = deg2rad(lon2-lon1); 
        var a = 
          Math.sin(dLat/2) * Math.sin(dLat/2) +
          Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
          Math.sin(dLon/2) * Math.sin(dLon/2)
          ; 
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
        var d = R * c; // Distance in km
        return d * 1000;
      }

      function deg2rad(deg) {
        return deg * (Math.PI/180)
      }

  body
    #nickname
      form.wrap#set-nickname
        p Please type in your nickname and press enter.
        input#nick
        p#nickname-err Nickname already in use
      #connecting
        .wrap Connecting to socket.io server
    section.header
      h1.js-room Terf
    section.article
      #chat
        ul.chat-list.js-chat#lines
          li.chat-item
            .item-left
              .profile-pic
                img(height=150,width=150,src="http://images2.nick.com/nicktoons-assets/shows/images/ren-stimpy/characters/character_stimpy.jpg?height=363&width=332&quality=0.75")
            .item-right
              .speech
                p Getting chatting!
    section.chat-bar
      form#send-message
        fieldset.inputFlex
          input.input-text(type="text",id="message",name="chat-field", placeholder="Write a message...")
          input.input-submit(type="submit",value="Send")